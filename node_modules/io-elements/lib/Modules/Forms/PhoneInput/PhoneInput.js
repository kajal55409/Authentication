"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _reactNative = require("react-native");
var _react = _interopRequireWildcard(require("react"));
var _MaterialIcons = _interopRequireDefault(require("react-native-vector-icons/MaterialIcons"));
var _colors = require("../../../utils/colors");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var PhoneInput = function PhoneInput(_ref) {
  var _ref$error = _ref.error,
    error = _ref$error === void 0 ? "Please provide your phone number" : _ref$error,
    _ref$isError = _ref.isError,
    isError = _ref$isError === void 0 ? false : _ref$isError,
    toggleMenu = _ref.toggleMenu,
    selected = _ref.selected,
    flag = _ref.flag,
    _ref$showFlags = _ref.showFlags,
    showFlags = _ref$showFlags === void 0 ? true : _ref$showFlags,
    color = _ref.color,
    _ref$height = _ref.height,
    height = _ref$height === void 0 ? 45 : _ref$height,
    codeButtonStyles = _ref.codeButtonStyles,
    InputStyles = _ref.InputStyles,
    _ref$label = _ref.label,
    label = _ref$label === void 0 ? "" : _ref$label,
    labelContainerStyle = _ref.labelContainerStyle,
    _ref$selectedColor = _ref.selectedColor,
    selectedColor = _ref$selectedColor === void 0 ? _colors.lightColors.primary : _ref$selectedColor,
    _ref$InputContainer = _ref.InputContainer,
    InputContainer = _ref$InputContainer === void 0 ? {} : _ref$InputContainer,
    codeColor = _ref.codeColor;
  var bgColor = color || _colors.lightColors.primary;
  var codeTextColor = codeColor || _colors.lightColors.white;
  var defaultInputStyles = {
    borderColor: !isError ? _colors.lightColors.primary : _colors.lightColors.error,
    borderWidth: 2,
    borderRadius: 10
  };
  var defaultCodeButtonStyle = {
    backgroundColor: bgColor,
    paddingHorizontal: 5,
    borderRadius: 10
  };
  var _useState = (0, _react.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    showModal = _useState2[0],
    setShowModal = _useState2[1];
  var closeModal = function closeModal() {
    setShowModal(false);
  };
  var openModal = function openModal() {
    setShowModal(true);
  };
  return /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
    style: [styles.container, InputContainer]
  }, label !== "" && /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
    style: labelContainerStyle
  }, /*#__PURE__*/_react["default"].createElement(_reactNative.Text, {
    style: {
      fontSize: 16,
      lineHeight: 24
    }
  }, label)), /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
    style: {
      flexDirection: "row",
      alignItems: "center"
    }
  }, /*#__PURE__*/_react["default"].createElement(_reactNative.TouchableOpacity, {
    onPress: toggleMenu,
    style: [{
      height: height,
      flexDirection: "row",
      justifyContent: "center",
      alignItems: "center"
    }, defaultCodeButtonStyle, codeButtonStyles]
  }, showFlags && /*#__PURE__*/_react["default"].createElement(_reactNative.Text, {
    style: {
      fontSize: 20
    }
  }, flag), /*#__PURE__*/_react["default"].createElement(_reactNative.Text, {
    style: {
      fontSize: 16,
      color: codeTextColor
    }
  }, selected), /*#__PURE__*/_react["default"].createElement(_MaterialIcons["default"], {
    name: "expand-more",
    size: 24,
    color: codeTextColor
  })), /*#__PURE__*/_react["default"].createElement(_reactNative.TextInput, {
    style: [{
      flex: 1,
      height: height,
      marginLeft: 5,
      paddingHorizontal: 10,
      width: "100%"
    }, defaultInputStyles, InputStyles],
    keyboardType: "number-pad",
    selectionColor: selectedColor
  })), isError && /*#__PURE__*/_react["default"].createElement(_reactNative.Text, {
    style: {
      fontSize: 11,
      color: _colors.lightColors.error,
      lineHeight: 15
    }
  }, error));
};
var _default = PhoneInput;
exports["default"] = _default;
var styles = _reactNative.StyleSheet.create({
  container: {
    width: "100%"
  }
});